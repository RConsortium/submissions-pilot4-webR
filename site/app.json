[{"name":"app.R","content":"library(shiny)\r\n\r\n# user_guide\r\nlibrary(reactable)\r\nlibrary(tibble)\r\n\r\n#demographic_table\r\nlibrary(rtables)\r\nlibrary(stats)\r\n\r\n# km_plot\r\nlibrary(cowplot)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(visR)\r\n\r\n# primary_table\r\nlibrary(Tplyr)\r\nlibrary(huxtable)\r\nlibrary(tidyr)\r\nlibrary(glue)\r\nlibrary(purrr)\r\nlibrary(stringr)\r\n\r\n# efficacy_table\r\nlibrary(emmeans)\r\nlibrary(graphics)\r\nlibrary(tippy)\r\n\r\n# completion_table\r\n##\r\n\r\nbox::use(\r\n  views / user_guide,\r\n  views / demographic_table,\r\n  views / km_plot,\r\n  views / primary_table,\r\n  views / efficacy_table,\r\n  views / completion_table\r\n)\r\n\r\n\r\nui <- bootstrapPage(\r\n  tabsetPanel(\r\n    id = \"moduleTabs\",\r\n    type = \"tabs\",\r\n\r\n    tabPanel(\"User Guide\", user_guide$ui(\"user_guide\", NULL)),\r\n    tabPanel(\"Demographic Table\", demographic_table$ui(\"demographic_table\", NULL)),\r\n    tabPanel(\"KM Plot\", km_plot$ui(\"km_plot\", NULL)),\r\n    tabPanel(\"Primary Table\", primary_table$ui(\"primary_table\", NULL)),\r\n    tabPanel(\"Efficacy Table\", efficacy_table$ui(\"efficacy_table\", NULL)),\r\n    tabPanel(\"Visit Completion Table\", completion_table$ui(\"visit_completion_table\", NULL))\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  moduleServer(\"user_guide\",\r\n    function(input, output, session) {\r\n      user_guide$server(input, output, session, NULL)\r\n    }\r\n  )\r\n  moduleServer(\"demographic_table\",\r\n    function(input, output, session) {\r\n      demographic_table$server(input, output, session, NULL)\r\n    }\r\n  )\r\n  moduleServer(\"km_plot\",\r\n    function(input, output, session) {\r\n      km_plot$server(input, output, session, NULL)\r\n    }\r\n  )\r\n  moduleServer(\"primary_table\",\r\n    function(input, output, session) {\r\n      primary_table$server(input, output, session, NULL)\r\n    }\r\n  )\r\n  moduleServer(\"efficacy_table\",\r\n    function(input, output, session) {\r\n      efficacy_table$server(input, output, session, NULL)\r\n    }\r\n  )\r\n  moduleServer(\"visit_completion_table\",\r\n    function(input, output, session) {\r\n      completion_table$server(input, output, session, NULL)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"logic/Tplyr_helpers.R","content":"box::use(\r\n  dplyr[across, starts_with, arrange, mutate, bind_rows, select, distinct, rename],\r\n  tidyr[replace_na],\r\n)\r\n\r\n#' Nest Row Labels in a Tplyr table\r\n#'\r\n#' This is a (high ungeneralized) helper function. Current function assumes that\r\n#' row_label1 groups row_label2, and turns row_label1 into a stub over its\r\n#' related groups of row_label2.\r\n#'\r\n#' @param .dat Input data set - should come from a built Tplyr table.\r\n#'\r\n#' @return data.frame with row labels nested\r\n#' @export\r\nnest_rowlabels <- function(.dat) {\r\n  stubs <- .dat |>\r\n    distinct(row_label1, ord_layer_index) |>\r\n    rename(row_label = row_label1) |>\r\n    mutate(\r\n      ord_layer_1 = 0,\r\n      ord_layer_2 = 0\r\n    )\r\n\r\n  .dat |>\r\n    select(-row_label1, row_label = row_label2) |>\r\n    bind_rows(stubs) |>\r\n    arrange(ord_layer_index, ord_layer_1, ord_layer_2) |>\r\n    mutate(\r\n      across(starts_with(\"var\"), ~ replace_na(., \"\"))\r\n    )\r\n}\r\n","type":"text"},{"name":"logic/eff_models.R","content":"box::use(\r\n  dplyr[arrange, bind_rows, case_when, filter, mutate, rowwise, select],\r\n  emmeans[contrast, lsmeans],\r\n  glue[glue],\r\n  stats[confint, drop1, lm],\r\n  tibble[as_tibble, tibble],\r\n  tidyr[pivot_longer],\r\n)\r\n\r\nbox::use(\r\n  .. / logic / helpers[pad_row, num_fmt],\r\n)\r\n\r\n#' ANCOVA Model data processing necessary for Table 14-3.01\r\n#'\r\n#' This function handles the necessary data processing to handle the CDISC pilot\r\n#' primary endpoint analysis. The original source can be found\r\n#' [here](https://github.com/atorus-research/CDISC_pilot_replication/blob/3c8e9e3798c02be8d93bd8e8944d1e0d3f6519e2/programs/funcs.R#L401) #nolint\r\n#'\r\n#' @param data Source dataset (filtered by flags)\r\n#' @param var Variable on which model should be run\r\n#' @param wk Visit to be modeled\r\n#' @param show_pvalue Indicator to display p-values in table\r\n#'\r\n#' @return Formatted dataframe\r\n#'\r\n#' @export\r\n#'\r\nefficacy_models <- function(data, var = NULL, wk = NULL, show_pvalue = TRUE) {\r\n  # Need to set contrasts to work for Type III SS. See analysis results metadata for\r\n  # table 14-3.01. Reference for R here: https://www.r-bloggers.com/anova-%E2%80%93-type-iiiiii-ss-explained/  #nolint\r\n  op <- options(contrasts = c(\"contr.sum\", \"contr.poly\"))\r\n\r\n  # Subset to analyze\r\n  data <- data |>\r\n    filter(AVISITN == wk)\r\n\r\n  data <- data |>\r\n    mutate(\r\n      TRTPCD = case_when(\r\n        TRTPN == 0 ~ \"Pbo\",\r\n        TRTPN == 54 ~ \"Xan_Lo\",\r\n        TRTPN == 81 ~ \"Xan_Hi\"\r\n      )\r\n    )\r\n\r\n  # Create an ordered factor variable for the models\r\n  data[\"TRTPCD_F\"] <- factor(data$TRTPCD, levels = c(\"Xan_Hi\", \"Xan_Lo\", \"Pbo\"))\r\n  data[\"AWEEKC\"] <- factor(data$AVISIT)\r\n\r\n  # Set up the models\r\n  if (var == \"CHG\") {\r\n    model1 <- lm(CHG ~ TRTPN + SITEGR1 + BASE, data = data)\r\n    model2 <- lm(CHG ~ TRTPCD_F + SITEGR1 + BASE, data = data)\r\n  } else {\r\n    model1 <- lm(AVAL ~ TRTPN + SITEGR1, data = data)\r\n    model2 <- lm(AVAL ~ TRTPCD_F + SITEGR1, data = data)\r\n  }\r\n\r\n  ## Dose Response --- NOTE: For statistics portions, I purposefully did not\r\n  # import the libraries to make it explicitly clear which packages were being\r\n  # used to match P-values.\r\n  ancova <- drop1(model1, . ~ ., test = \"F\")\r\n\r\n  # Pull it out into a table\r\n  sect1 <- tibble(\r\n    row_label = c(\"p-value(Dose Response) [1][2]\"),\r\n    `81` = ifelse(\r\n      show_pvalue,\r\n      c(num_fmt(ancova[2, \"Pr(>F)\"], int_len = 4, digits = 3, size = 12)),\r\n      \"Not Applicable\"\r\n    )\r\n  ) |>\r\n    pad_row()\r\n\r\n  ## Pairwise Comparisons ----\r\n  # Here's a reference for the emmeans package and how to use it:\r\n  #   https://cran.r-project.org/web/packages/emmeans/vignettes/confidence-intervals.html\r\n  # Adjustments made are in line with the analysis results metadata in the analysis define\r\n  # and PROC GLM documentation.\r\n\r\n  # Linear model but use treatment group as a factor now\r\n  # LS Means and weight proportionately to match OM option on PROC GLM in SAS\r\n  lsm <- lsmeans(model2, ~TRTPCD_F, weights = \"proportional\")\r\n\r\n  # Here on out - it's all the same data manipulation\r\n  # Get pairwise contrast and remove P-values adjustment for multiple groups\r\n  cntrst_p <- contrast(lsm, method = \"pairwise\", adjust = NULL)\r\n  # 95% CI\r\n  cntrst_ci <- confint(cntrst_p)\r\n\r\n  # merge and convert into dataframe\r\n  pw_data <- as_tibble(summary(cntrst_p)) |>\r\n    merge(as_tibble(cntrst_ci)) |>\r\n    rowwise() |>\r\n    # Create the display strings\r\n    mutate(\r\n      p = ifelse(\r\n        show_pvalue,\r\n        num_fmt(p.value, int_len = 4, digits = 3, size = 12),\r\n        \"Not Applicable\"\r\n      ),\r\n      diff_se = as.character(\r\n        glue(\r\n          \"{num_fmt(estimate, int_len=2, digits=1, size=4)}\r\n          ({num_fmt(SE, int_len=1, digits=2, size=4)})\"\r\n        )\r\n      ),\r\n      ci = as.character(\r\n        glue(\r\n          \"({num_fmt(lower.CL, int_len=2, digits=1, size=4)};\r\n          {num_fmt(upper.CL, int_len=1, digits=1, size=3)})\"\r\n        )\r\n      )\r\n    ) |>\r\n    # Clean out the numeric variables\r\n    select(contrast, p, diff_se, ci) |>\r\n    # Transpose\r\n    pivot_longer(c(\"p\", \"diff_se\", \"ci\"), names_to = \"row_label\")\r\n\r\n  # Subset Xan_Lo - Pbo into table variables\r\n  xan_lo <- pw_data |>\r\n    filter(contrast == \"Xan_Lo - Pbo\") |>\r\n    # Rename to the table display variable\r\n    select(`54` = value) |>\r\n    pad_row()\r\n\r\n  # Add in row_label\r\n  xan_lo[\"row_label\"] <- c(\r\n    \"p-value(Xan - Placebo) [1][3]\", \"  Diff of LS Means (SE)\", \"  95% CI\", \"\"\r\n  )\r\n\r\n  # Subset Xan_hi - Pbo into table variables\r\n  xan_hi <- pw_data |>\r\n    filter(contrast == \"Xan_Hi - Pbo\") |>\r\n    # Rename to the table display variable\r\n    select(`81` = value) |>\r\n    pad_row()\r\n  # Add in row_label\r\n  xan_hi[\"row_label\"] <- c(\r\n    \"p-value(Xan - Placebo) [1][3]\", \"  Diff of LS Means (SE)\", \"  95% CI\", \"\"\r\n  )\r\n  xan_hi[\"ord\"] <- c(1, 2, 3, 4) # Order for sorting\r\n\r\n  # Subset Xan_Hi - Xan_Lo into table variable\r\n  xan_xan <- pw_data |>\r\n    filter(contrast == \"Xan_Hi - Xan_Lo\") |>\r\n    # Rename to the table display variable\r\n    select(`81` = value)\r\n  # Add in row_label\r\n  xan_xan[\"row_label\"] <- c(\r\n    \"p-value(Xan High - Xan Low) [1][3]\", \"  Diff of LS Means (SE)\", \"  95% CI\"\r\n  )\r\n  xan_xan[\"ord\"] <- c(5, 6, 7) # Order for sorting\r\n\r\n  # Pack it all together\r\n  pw_final <- merge(xan_lo, xan_hi, by = \"row_label\") |>\r\n    bind_rows(xan_xan) |>\r\n    arrange(ord)\r\n\r\n  # Bind and clean up\r\n  bind_rows(sect1, pw_final) |>\r\n    select(row_label,\r\n      `var1_Xanomeline Low Dose` = `54`,\r\n      `var1_Xanomeline High Dose` = `81`\r\n    )\r\n}\r\n","type":"text"},{"name":"logic/formatters.R","content":"#' Format numeric value\r\n#'\r\n#' @examples\r\n#' fmt_num(1.25, digits = 1)\r\n#' @export\r\nfmt_num <- function(x, digits, width = digits + 4) {\r\n  formatC(x,\r\n    digits = digits,\r\n    format = \"f\",\r\n    width = width\r\n  )\r\n}\r\n\r\n#' Format point estimator\r\n#'\r\n#' @param .mean mean of an estimator.\r\n#' @param .sd sd of an estimator.\r\n#' @param digits number of digits for `.mean` and `.sd`.\r\n#'\r\n#' @examples\r\n#' fmt_est(1.25, 0.5)\r\n#' @export\r\nfmt_est <- function(.mean,\r\n                    .sd,\r\n                    digits = c(1, 2)) {\r\n  .mean <- fmt_num(.mean, digits[1], width = digits[1] + 4)\r\n  .sd <- fmt_num(.sd, digits[2], width = digits[2] + 3)\r\n  paste0(.mean, \" (\", .sd, \")\")\r\n}\r\n\r\n#' Format confidence interval\r\n#'\r\n#' @param .est an estimator.\r\n#' @param .lower lower confidence interval bound of an estimator.\r\n#' @param .upper upper confidence interval bound of an estimator.\r\n#' @param digits number of digits for `.est`, `.lower`, and `.upper`.\r\n#' @param width the total field width.\r\n#'\r\n#' @examples\r\n#' fmt_ci(1, -0.25, 1.32)\r\n#' @export\r\nfmt_ci <- function(.est,\r\n                   .lower,\r\n                   .upper,\r\n                   digits = 2,\r\n                   width = digits + 3) {\r\n  .est <- fmt_num(.est, digits, width)\r\n  .lower <- fmt_num(.lower, digits, width)\r\n  .upper <- fmt_num(.upper, digits, width)\r\n  paste0(.est, \" (\", .lower, \",\", .upper, \")\")\r\n}\r\n\r\n#' Format p-Value\r\n#'\r\n#' @param .p a p-value.\r\n#' @param digits number of digits for `.est`, `.lower`, and `.upper`.\r\n#'\r\n#' @examples\r\n#' fmt_pval(0.2)\r\n#' @export\r\nfmt_pval <- function(.p, digits = 3) {\r\n  scale <- 10^(-1 * digits)\r\n  p_scale <- paste0(\"<\", digits)\r\n  ifelse(.p < scale, p_scale, fmt_num(.p, digits = digits))\r\n}\r\n","type":"text"},{"name":"logic/helpers.R","content":"box::use(\r\n  glue[glue],\r\n  purrr[map_lgl],\r\n  rtables[nrow],\r\n  stringr[str_pad],\r\n)\r\n\r\n#' Add a padding row below data\r\n#'\r\n#' @param .data Data to pad\r\n#' @param n Number of rows to pad\r\n#'\r\n#' @return Dataframe with extra blank rows\r\n#' @export\r\npad_row <- function(.data, n = 1) {\r\n  .data[(nrow(.data) + 1):(nrow(.data) + n), ] <- \"\"\r\n  .data\r\n}\r\n\r\n#' Number formatter\r\n#'\r\n#' Format numbers for presentation, with proper rounding of data\r\n#'\r\n#' @param var Variable to format\r\n#' @param digits Desired number of decimal places\r\n#' @param size String size\r\n#' @param int_len Space allotted for integer side of the decimal\r\n#'\r\n#' @return Formatted string\r\n#' @export\r\nnum_fmt <- Vectorize(function(var, digits = 0, size = 10, int_len = 3) {\r\n  # Formats summary stat strings to align display correctly\r\n\r\n  if (is.na(var)) {\r\n    return(\"\")\r\n  }\r\n\r\n  # Set nsmall to input digits\r\n  nsmall <- digits\r\n\r\n  # Incremement digits for to compensate for display\r\n  if (digits > 0) {\r\n    digits <- digits + 1\r\n  }\r\n\r\n  # Form the string\r\n  return(str_pad(\r\n    format(\r\n      # Round\r\n      round(var, nsmall),\r\n      # Set width of format string\r\n      width = (int_len + digits),\r\n      # Decimals to display\r\n      nsmall = nsmall\r\n    ),\r\n    # Overall width padding\r\n    side = \"right\", size\r\n  ))\r\n})\r\n\r\n#' style a tooltip produced by the tippy package\r\n#'\r\n#' @param text String for text in tooltip\r\n#' @param font_size Font size (in pixels)\r\n#'\r\n#' @return HTML with font size applied\r\n#' @export\r\ntooltip_text <- function(text, font_size = 16) {\r\n  glue(\"<span style='font-size:{font_size}px;'>{text}<span>\")\r\n}\r\n\r\n#' check if a filter is active in a teal module\r\n#'\r\n#' @param datasets instance of teal filtered datasets class\r\n#'\r\n#' @return boolean, TRUE if a filter is applied, FALSE otherwise\r\n#' @export\r\nfilter_active <- function(datasets) {\r\n  result <- FALSE\r\n  if (length(names(datasets$get_filter_state()) > 0)) {\r\n    filter_use <- map_lgl(names(datasets$get_filter_state()), ~ {\r\n      # grab call of filter code\r\n      f_call <- datasets$get_call(.x)$filter\r\n      f_call != glue(\"{.x}_FILTERED <- {.x}\")\r\n    })\r\n    result <- any(filter_use)\r\n  }\r\n\r\n  return(result)\r\n}\r\n","type":"text"},{"name":"logic/kmplot_helpers.R","content":"box::use(\r\n  cowplot[plot_grid],\r\n  dplyr[desc, intersect],\r\n  ggplot2[\r\n    aes, element_blank, element_text, geom_text, ggplot, ggplot_build,\r\n    ggtitle, scale_x_continuous, theme, theme_bw, unit, xlab, ylab\r\n  ],\r\n  stats[reorder],\r\n  # teal.data[get_labels],\r\n  visR[align_plots, get_risktable],\r\n)\r\n\r\nget_labels <- function(data, fill = TRUE) {\r\n  stopifnot(is.data.frame(data))\r\n  checkmate::assert_flag(fill)\r\n\r\n  column_labels <- Map(function(col, colname) {\r\n    label <- attr(col, \"label\")\r\n    if (is.null(label)) {\r\n      if (fill) {\r\n        colname\r\n      } else {\r\n        NA_character_\r\n      }\r\n    } else {\r\n      if (!checkmate::test_string(label, na.ok = TRUE)) {\r\n        stop(\"label for variable \", colname, \" is not a character string\")\r\n      }\r\n      as.vector(label) # because label might be a named vector\r\n    }\r\n  }, data, colnames(data))\r\n  column_labels <- unlist(column_labels, recursive = FALSE, use.names = TRUE)\r\n\r\n  list(\"dataset_label\" = data_label(data), \"column_labels\" = column_labels)\r\n}\r\n\r\n#' @export\r\nadd_risktable2 <- function(gg,\r\n                           times = NULL,\r\n                           statlist = \"n.risk\",\r\n                           label = NULL,\r\n                           group = \"strata\",\r\n                           collapse = FALSE,\r\n                           rowgutter = .16,\r\n                           risk_font_size = 6.0,\r\n                           risk_label_font_size = 12,\r\n                           ...) {\r\n  if (!(is.numeric(rowgutter) == TRUE) || (rowgutter < 0) || (rowgutter > 1)) {\r\n    stop(\"rowgutter should be a numeric value in range [0, 1]\")\r\n  }\r\n\r\n  tidy_object <- gg$data\r\n  estimate_object <- visR:::.extract_estimate_object(gg)\r\n\r\n  ggbld <- ggplot_build(gg)\r\n\r\n  graphtimes <- as.numeric(ggbld$layout$panel_params[[1]]$x$get_labels())\r\n\r\n  if (is.null(times)) times <- graphtimes\r\n\r\n  final <-\r\n    get_risktable(estimate_object,\r\n      times = times,\r\n      statlist = statlist,\r\n      label = label,\r\n      group = group,\r\n      collapse = collapse\r\n    )\r\n\r\n  times <- as.numeric(unique(final$time))\r\n  statlist <- attributes(final)$statlist\r\n  title <- attributes(final)$title\r\n\r\n  attr(final, \"time_ticks\") <- NULL\r\n  attr(final, \"statlist\") <- NULL\r\n  attr(final, \"title\") <- NULL\r\n\r\n  tbls <- Map(\r\n    function(statlist, title = NA) {\r\n      ggrisk <- ggplot(\r\n        final,\r\n        aes(\r\n          x = time,\r\n          y = reorder(y_values, desc(y_values)),\r\n          label = format(get(statlist), nsmall = 0)\r\n        )\r\n      ) +\r\n        geom_text(size = risk_font_size, hjust = 0.5, vjust = 0.5, angle = 0, show.legend = FALSE) +\r\n        theme_bw() +\r\n        scale_x_continuous(\r\n          breaks = graphtimes,\r\n          limits = c(min(graphtimes), max(graphtimes))\r\n        ) +\r\n        theme(\r\n          axis.title.x = element_text(\r\n            size = 8,\r\n            vjust = 1,\r\n            hjust = 1\r\n          ),\r\n          panel.grid.major = element_blank(),\r\n          panel.grid.minor = element_blank(),\r\n          panel.border = element_blank(),\r\n          axis.line = element_blank(),\r\n          axis.text.x = element_blank(),\r\n          axis.ticks = element_blank(),\r\n          axis.text.y = element_text(size = risk_label_font_size, colour = \"black\", face = \"plain\"),\r\n          plot.margin = unit(c(1, 0, 0, 0), \"lines\"),\r\n          plot.title = element_text(hjust = 0, vjust = 0),\r\n          legend.position = \"none\"\r\n        ) +\r\n        xlab(NULL) +\r\n        ylab(NULL)\r\n\r\n      if (!is.na(title) && !is.null(title)) {\r\n        ggrisk <- ggrisk +\r\n          ggtitle(title) +\r\n          theme(plot.title = element_text(size = 10))\r\n      }\r\n\r\n      return(ggrisk)\r\n    },\r\n    statlist = as.list(statlist),\r\n    title = as.list(title)\r\n  )\r\n\r\n  gglist <- list(gg) |>\r\n    append(tbls)\r\n\r\n  gg_a <- gglist |>\r\n    align_plots()\r\n\r\n  gg_b <- plot_grid(\r\n    plotlist = gg_a,\r\n    align = \"none\",\r\n    nrow = length(gg_a),\r\n    rel_heights = c(1 - (rowgutter * (length(gg_a) - 1)), rep(rowgutter, length(gg_a) - 1))\r\n  )\r\n\r\n  class(gg_b) <- c(class(gg_b), intersect(class(gg), c(\"ggsurvfit\", \"ggtidycmprsk\")))\r\n\r\n  components <- append(list(gg), tbls)\r\n  names(components) <- c(\"visR_plot\", title)\r\n  gg_b[[\"components\"]] <- components\r\n\r\n  return(gg_b)\r\n}\r\n","type":"text"},{"name":"views/completion_table.R","content":"box::use(\r\n  Tplyr[\r\n    add_column_headers, add_layer, add_total_group, build, f_str,\r\n    group_count, header_n, set_distinct_by, set_format_strings,\r\n    set_pop_data, set_pop_treat_var, tplyr_table\r\n  ],\r\n  dplyr[distinct, filter, left_join, mutate, select, tibble],\r\n  huxtable[\r\n    as_hux, set_align, set_bold, set_bottom_border,\r\n    set_col_width, set_escape_contents, set_valign, set_width, to_html\r\n  ],\r\n  rtables[ncol],\r\n  shiny[HTML, NS, p, renderUI, tagList, uiOutput],\r\n)\r\n\r\n#' @export\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  tagList(\r\n    uiOutput(ns(\"table\")),\r\n    p(\"Table is based on participants within the ITT population\")\r\n  )\r\n}\r\n\r\n#' @export\r\nserver <- function(input, output, session, datasets) {\r\n  output$table <- renderUI({\r\n    filtered_adsl <- datasets$get_data(\"ADSL\", filtered = FALSE)\r\n    filtered_adlb <- datasets$get_data(\"ADLB\", filtered = FALSE)\r\n    adsl <- filtered_adsl\r\n    adlbc <- filtered_adlb\r\n\r\n    # use adlbc data set to remain consistent with efficacy table input data\r\n    visit_df <- adlbc |>\r\n      filter(PARAMCD == \"GLUC\") |>\r\n      filter(AVISITN != 98) |>\r\n      filter(!is.na(AVISITN)) |>\r\n      select(USUBJID, AVISITN) |>\r\n      distinct() |>\r\n      left_join(\r\n        select(adsl, USUBJID, TRT01P),\r\n        by = \"USUBJID\"\r\n      )\r\n\r\n    # visit number and week lookup\r\n    v_week_df <- tibble(\r\n      AVISITN = c(0, 2, 4, 6, 8, 12, 16, 20, 24, 26, 99),\r\n      VISIT = c(\"Baseline \", paste(\"Week\", c(2, 4, 6, 8, 12, 16, 20, 24, 26)), \"End of Treatment\")\r\n    ) |>\r\n      mutate(\r\n        VISIT = factor(\r\n          VISIT,\r\n          levels = c(\r\n            \"Baseline \",\r\n            paste(\"Week\", c(2, 4, 6, 8, 12, 16, 20, 24, 26)),\r\n            \"End of Treatment\"\r\n          )\r\n        )\r\n      )\r\n\r\n    # build Tplyr table\r\n    t_visit <- visit_df |>\r\n      left_join(v_week_df, by = \"AVISITN\") |>\r\n      tplyr_table(TRT01P) |>\r\n      set_pop_data(adsl) |>\r\n      set_pop_treat_var(TRT01P) |>\r\n      add_total_group() |>\r\n      add_layer(\r\n        group_count(VISIT) |>\r\n          set_distinct_by(USUBJID) |>\r\n          set_format_strings(\r\n            f_str(\"xx (xx%)\", distinct_n, distinct_pct)\r\n          )\r\n      )\r\n\r\n    b_t_visit <- t_visit |>\r\n      build() |>\r\n      select(\r\n        row_label1, var1_Placebo, `var1_Xanomeline High Dose`,\r\n        `var1_Xanomeline Low Dose`, var1_Total\r\n      ) |>\r\n      add_column_headers(\r\n        paste0(\r\n          \"|Placebo<\/br>(N=**Placebo**)\",\r\n          \"| Xanomeline High Dose<\/br>(N=**Xanomeline High Dose**) \",\r\n          \"| Xanomeline Low Dose<\/br>(N=**Xanomeline Low Dose**) \",\r\n          \"| Total<\/br>(N=**Total**) \"\r\n        ),\r\n        header_n(t_visit)\r\n      )\r\n\r\n    ht <- as_hux(b_t_visit, add_colnames = FALSE) |>\r\n      set_bold(1, seq_len(ncol(b_t_visit)), TRUE) |>\r\n      set_align(1, seq_len(ncol(b_t_visit)), \"center\") |>\r\n      set_valign(1, seq_len(ncol(b_t_visit)), \"bottom\") |>\r\n      set_bottom_border(1, seq_len(ncol(b_t_visit)), 1) |>\r\n      set_width(0.9) |>\r\n      set_escape_contents(FALSE) |>\r\n      set_col_width(c(.5, 1 / 8, 1 / 8, 1 / 8, 1 / 8))\r\n    HTML(to_html(ht))\r\n  })\r\n}\r\n","type":"text"},{"name":"views/demographic_table.R","content":"box::use(\r\n  rtables[\r\n    add_colcounts, analyze, as_html, basic_table,\r\n    build_table, in_rows, list_wrap_x, split_cols_by\r\n  ],\r\n  shiny[NS, renderUI, uiOutput],\r\n  stats[median, sd],\r\n)\r\n\r\n#' ui_t_demographic UI Function\r\n#'\r\n#' @description A shiny Module.\r\n#'\r\n#' @param id,input,output,session Internal parameters for {shiny}.\r\n#'\r\n#' @export\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  uiOutput(ns(\"table\"), class = \"top-margin\")\r\n}\r\n\r\n#' srv_t_demographic Server Functions\r\n#'\r\n#' @export\r\nserver <- function(input, output, session, datasets) {\r\n  output$table <- renderUI({\r\n    if (is.null(datasets)) {\r\n      return(NULL)\r\n    }\r\n\r\n    filtered_adsl <- datasets$get_data(\"ADSL\", filtered = FALSE)\r\n    vars <- c(\"AGE\", \"AGEGR1\", \"RACE\", \"HEIGHTBL\", \"WEIGHTBL\", \"BMIBL\")\r\n    labels <- datasets$get_varlabels(\"ADSL\", vars)\r\n    labels <- vapply(vars, function(x) {\r\n      ifelse(is.na(labels[[x]]),\r\n        x, labels[[x]]\r\n      )\r\n    }, character(1))\r\n    labels[\"AGEGR1\"] <- \"Age group\"\r\n    labels[\"AGE\"] <- \"Age (year)\"\r\n    labels[\"RACE\"] <- \"Race\"\r\n    lyt <- basic_table(\r\n      title = \"Protocol: CDISCPILOT01\",\r\n      subtitles = \"Population: Intent-to-Treat\",\r\n      main_footer = paste0(Sys.time())\r\n    ) |>\r\n      split_cols_by(\"TRT01P\") |>\r\n      add_colcounts() |>\r\n      analyze(vars, function(x, ...) {\r\n        if (is.numeric(x)) {\r\n          in_rows(\r\n            \"Mean (SD)\" = c(mean(x), sd(x)),\r\n            \"Median\" = median(x),\r\n            \"Min - Max\" = range(x),\r\n            .formats = c(\"xx.xx (xx.xx)\", \"xx.xx\", \"xx.xx - xx.xx\")\r\n          )\r\n        } else if (is.factor(x) || is.character(x)) {\r\n          in_rows(.list = list_wrap_x(table)(x))\r\n        } else {\r\n          stop(\"type not supproted\")\r\n        }\r\n      },\r\n      var_labels = labels\r\n      )\r\n    tbl <- build_table(lyt, filtered_adsl)\r\n    as_html(tbl)\r\n  })\r\n}\r\n","type":"text"},{"name":"views/efficacy_table.R","content":"box::use(\r\n  dplyr[filter, group_by, mutate, n, right_join, select, summarise],\r\n  emmeans[emmeans],\r\n  graphics[pairs],\r\n  purrr[map2],\r\n  reactable[colDef, colGroup, reactable, reactableOutput, renderReactable],\r\n  rtables[ncol],\r\n  shiny[NS, br, column, fluidPage, fluidRow, h4, h6, hr, p, reactive, tags],\r\n  stats[lm, sd],\r\n  tippy[tippy],\r\n)\r\nbox::use(\r\n  .. / logic / formatters[fmt_est, fmt_ci, fmt_pval],\r\n  .. / logic / helpers[tooltip_text, filter_active],\r\n)\r\n\r\n#' @export\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  fluidPage(\r\n    tags$br(),\r\n    tags$br(),\r\n    fluidRow(\r\n      tippy(\r\n        h4(\"Primary Endpoint Analysis: Glucose (mmol/L) - Summary at Week 20 LOCF\"),\r\n        tooltip = tooltip_text(\r\n          \"Table is based on participants who have observable data at Baseline and Week 20\",\r\n          font_size = 16\r\n        ),\r\n        allowHTML = TRUE\r\n      ),\r\n      tags$br(), tags$br(),\r\n      column(\r\n        width = 10,\r\n        reactableOutput(ns(\"tbl_efficacy_1\"))\r\n      )\r\n    ),\r\n    tags$br(),\r\n    tags$br(),\r\n    tags$hr(),\r\n    fluidRow(\r\n      tippy(\r\n        h4(\"Pairwise Comparison\"),\r\n        tooltip = tooltip_text(\r\n          \"Inference in this table is based on a Analysis of Covariance (ANCOVA) model\r\n          with treatment and baseline value as covariates.\",\r\n          font_size = 16\r\n        ),\r\n        allowHTML = TRUE\r\n      ),\r\n      tags$br(),\r\n      tags$br(),\r\n      column(\r\n        width = 10,\r\n        reactableOutput(ns(\"tbl_efficacy_2\"))\r\n      )\r\n    ),\r\n    tags$br(),\r\n    tags$br(),\r\n    tags$hr(),\r\n    fluidRow(\r\n      h6(tags$i(\r\n        \"Abbreviations: CI=Confidence Interval; LS=Least Squares; SD=Standard Deviation\"\r\n      )),\r\n      h6(tags$p(\r\n        \"Table is based on participants who had observable data at Baseline and Week 20\"\r\n      )),\r\n      h6(tags$p(\r\n        \"Based on an Analysis of Covariance (ANCOVA) model\r\n        with treatment and baseline value as covariates\"\r\n      ))\r\n    )\r\n  )\r\n}\r\n\r\n#' @export\r\nserver <- function(input, output, session, datasets) {\r\n  efficacy_results <- reactive({\r\n    adsl <- datasets$get_data(\"ADSL\", filtered = FALSE)\r\n\r\n    itt <- adsl |>\r\n      filter(ITTFL == \"Y\") |>\r\n      select(\"STUDYID\", \"USUBJID\")\r\n\r\n    adlb <- datasets$get_data(\"ADLB\", filtered = FALSE)\r\n\r\n    # prepare labs data for pairwise comparison\r\n    adlb1 <- adlb |>\r\n      right_join(itt, by = c(\"STUDYID\", \"USUBJID\")) |>\r\n      filter(TRTPN %in% c(0, 81), PARAMCD == \"GLUC\", !is.na(AVISITN)) |>\r\n      mutate(TRTPN = ifelse(TRTPN == 0, 99, TRTPN))\r\n\r\n    gluc_lmfit <- lm(\r\n      CHG ~ BASE + TRTPN,\r\n      data = adlb1 |>\r\n        filter(AVISITN == 20)\r\n    )\r\n\r\n    t10 <- adlb1 |>\r\n      filter(AVISITN == 0) |>\r\n      group_by(TRTPN, TRTP) |>\r\n      summarise(\r\n        N = n(),\r\n        mean_bl = mean(BASE),\r\n        sd_bl = sd(BASE)\r\n      )\r\n\r\n    ## Raw summary statistics\r\n    t11 <- adlb1 |>\r\n      filter(AVISITN == 20, !is.na(CHG), !is.na(BASE)) |>\r\n      group_by(TRTPN, TRTP) |>\r\n      summarise(\r\n        N_20 = n(),\r\n        mean_chg = mean(CHG),\r\n        sd_chg = sd(CHG),\r\n        mean = mean(AVAL),\r\n        sd = sd(AVAL)\r\n      )\r\n\r\n    ## Calculate LS mean\r\n    t12 <- emmeans(gluc_lmfit, \"TRTPN\")\r\n\r\n    ## Merge and format data for reporting\r\n    apr0ancova1 <- merge(t10, t11) |>\r\n      merge(t12) |>\r\n      mutate(emmean_sd = SE * sqrt(df)) |>\r\n      mutate(\r\n        Trt = c(\"Xanomeline High Dose\", \"Placebo\"),\r\n        N1 = N,\r\n        Mean1 = fmt_est(mean_bl, sd_bl),\r\n        N2 = N_20,\r\n        Mean2 = fmt_est(mean, sd),\r\n        N3 = N_20,\r\n        Mean3 = fmt_est(mean_chg, sd_chg),\r\n        CI = fmt_ci(emmean, lower.CL, upper.CL)\r\n      ) |>\r\n      select(Trt:CI)\r\n\r\n    t2 <- data.frame(pairs(t12))\r\n\r\n    ## Treatment Comparison\r\n    apr0ancova2 <- t2 |>\r\n      mutate(\r\n        lower = estimate - 1.96 * SE,\r\n        upper = estimate + 1.96 * SE\r\n      ) |>\r\n      mutate(\r\n        comp = \"Study Drug vs. Placebo\",\r\n        mean = fmt_ci(estimate, lower, upper),\r\n        p = ifelse(filter_active(datasets), \"Not Applicable\", fmt_pval(p.value))\r\n      ) |>\r\n      select(comp:p)\r\n\r\n    ### Calculate root mean square and save data in output folder\r\n    apr0ancova3 <- data.frame(rmse = paste0(\r\n      \"Root Mean Squared Error of Change = \",\r\n      formatC(sqrt(mean((gluc_lmfit$residuals)^2)), digits = 2, format = \"f\", flag = \"0\")\r\n    ))\r\n    list(\r\n      apr0ancova1 = apr0ancova1,\r\n      apr0ancova2 = apr0ancova2,\r\n      apr0ancova3 = apr0ancova3\r\n    )\r\n  })\r\n  output$tbl_efficacy_1 <- renderReactable({\r\n    efficacy_results <- efficacy_results()\r\n    apr0ancova1 <- efficacy_results$apr0ancova1\r\n    coln <- c(\r\n      \"Treatment\",\r\n      \"N\", \"Mean (SD)\",\r\n      \"N\", \"Mean (SD)\",\r\n      \"N\", \"Mean (SD)\", \"LS Mean (95% CI)\"\r\n    )\r\n    colgr <- c(1, 2, 2, 3, 3, 4, 4, 4)\r\n    colwidths <- c(rep(100, 7), 150)\r\n    colgrn <- c(\"\", \"Baseline\", \"Week 20\", \"Change from Baseline\")\r\n    collist <- map2(seq_len(ncol(apr0ancova1)), colwidths, ~ {\r\n      colDef(name = coln[.x], minWidth = .y)\r\n    })\r\n    names(collist) <- names(apr0ancova1)\r\n    reactable(\r\n      apr0ancova1,\r\n      columns = collist,\r\n      columnGroups = list(\r\n        colGroup(name = colgrn[2], columns = names(apr0ancova1)[colgr == 2]),\r\n        colGroup(name = colgrn[3], columns = names(apr0ancova1)[colgr == 3]),\r\n        colGroup(name = colgrn[4], columns = names(apr0ancova1)[colgr == 4])\r\n      )\r\n    )\r\n  })\r\n  output$tbl_efficacy_2 <- renderReactable({\r\n    efficacy_results <- efficacy_results()\r\n    apr0ancova2 <- efficacy_results$apr0ancova2\r\n    apr0ancova3 <- efficacy_results$apr0ancova3\r\n    coln <- c(\r\n      \"\",\r\n      \"Difference in LS Mean (95% CI)\",\r\n      \"p-Value\"\r\n    )\r\n    collist <- lapply(seq_len(ncol(apr0ancova2)), function(xx) {\r\n      if (xx > 1) {\r\n        colDef(name = coln[xx])\r\n      } else {\r\n        colDef(name = coln[xx], footer = apr0ancova3$rmse)\r\n      }\r\n    })\r\n    names(collist) <- names(apr0ancova2)\r\n\r\n    reactable(\r\n      apr0ancova2,\r\n      columns = collist,\r\n      defaultColDef = colDef(footerStyle = list(fontStyle = \"italic\"))\r\n    )\r\n  })\r\n}\r\n","type":"text"},{"name":"views/km_plot.R","content":"box::use(\r\n  cowplot[draw_label, ggdraw, plot_grid],\r\n  dplyr[filter, inner_join, mutate, select],\r\n  ggplot2[element_text, geom_hline, rel, theme, theme_bw, theme_set],\r\n  shiny[NS, p, plotOutput, renderPlot, tagList, tags],\r\n  visR[add_CI, add_CNSR, estimate_KM, visr]\r\n)\r\n\r\nbox::use(\r\n  .. / logic / kmplot_helpers[add_risktable2],\r\n)\r\n\r\n#' @export\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  plotOutput(ns(\"plot\"), height = \"800px\")\r\n}\r\n\r\n#' @export\r\nserver <- function(input, output, session, datasets) {\r\n  output$plot <- renderPlot({\r\n    if (is.null(datasets)) {\r\n      return(NULL)\r\n    }\r\n\r\n    adsl <- datasets$get_data(\"ADSL\", filtered = TRUE)\r\n    adtte <- datasets$get_data(\"ADTTE\", filtered = TRUE)\r\n    anl <- adsl |>\r\n      filter(\r\n        SAFFL == \"Y\",\r\n        STUDYID == \"CDISCPILOT01\"\r\n      ) |>\r\n      select(STUDYID, USUBJID, TRT01A) |>\r\n      inner_join(\r\n        filter(\r\n          adtte, STUDYID == \"CDISCPILOT01\"\r\n        ) |> select(STUDYID, USUBJID, AVAL, CNSR, PARAM, PARAMCD),\r\n        by = c(\"STUDYID\", \"USUBJID\")\r\n      ) |>\r\n      mutate(\r\n        TRT01A = factor(\r\n          TRT01A,\r\n          levels = c(\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\")\r\n        ),\r\n        AVAL = AVAL / 30.4167\r\n      )\r\n\r\n    surv_mod <- estimate_KM(data = anl, strata = \"TRT01A\")\r\n    theme_set(theme_bw())\r\n\r\n    km_plot <- visr(surv_mod,\r\n      y_label = \"Survival Probability (%)\",\r\n      x_label = \"Time (Months)\",\r\n      fun = \"pct\",\r\n      legend_position = \"bottom\"\r\n    ) |>\r\n      add_CNSR() |>\r\n      add_CI()\r\n\r\n    km_plot <- km_plot +\r\n      theme(\r\n        axis.text = element_text(size = rel(1.3)),\r\n        axis.title = element_text(size = rel(1.4)),\r\n        legend.text = element_text(size = rel(1.3)),\r\n        legend.title = element_text(size = rel(1.4))\r\n      ) +\r\n      geom_hline(yintercept = 0.5, linetype = \"dashed\")\r\n\r\n    km_plot <- km_plot |>\r\n      add_risktable2(group = \"statlist\")\r\n\r\n    title <- ggdraw() +\r\n      draw_label(\r\n        \"KM plot for Time to First Dermatologic Event: Safety population\\n\",\r\n        fontface = \"bold\",\r\n        size = 16\r\n      )\r\n\r\n    caption <- ggdraw() +\r\n      draw_label(\r\n        paste(\r\n          \"The shaded areas are 95% CI of the survival probability for each group\",\r\n          \"\\n\",\r\n          paste0(Sys.time())\r\n        ),\r\n        size = 12\r\n      )\r\n\r\n    km_plot <- plot_grid(\r\n      title, km_plot, caption,\r\n      ncol = 1,\r\n      rel_heights = c(0.1, 0.8, 0.1)\r\n    )\r\n    km_plot\r\n  })\r\n}\r\n","type":"text"},{"name":"views/primary_table.R","content":"box::use(\r\n  Tplyr[\r\n    add_column_headers, add_layer, build, f_str, group_desc, header_n, set_desc_layer_formats,\r\n    set_distinct_by, set_pop_data, set_pop_treat_var, set_pop_where, tplyr_table\r\n  ],\r\n  dplyr[bind_rows, select, starts_with],\r\n  huxtable[\r\n    as_hux, set_align, set_bold, set_bottom_border, set_col_width,\r\n    set_escape_contents, set_valign, set_width, to_html\r\n  ],\r\n  rtables[ncol],\r\n  shiny[HTML, NS, p, renderUI, tagList, uiOutput],\r\n)\r\n\r\nbox::use(\r\n  .. / logic / eff_models[efficacy_models],\r\n  .. / logic / Tplyr_helpers[nest_rowlabels],\r\n  .. / logic / helpers[filter_active],\r\n)\r\n\r\n#' @export\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  tagList(\r\n    uiOutput(ns(\"table\")),\r\n    p(\r\n      \"Statistical model and comparison p-values removed when applying data filters.\r\n      Refer to the application information for additional details.\"\r\n    ),\r\n    p(\r\n      \"[1] Based on Analysis of covariance (ANCOVA) model with treatment and\r\n      site group as factors and baseline value as a covariate.\"\r\n    ),\r\n    p(\r\n      \"[2] Test for a non-zero coefficient for treatment (dose) as a continuous variable.\"\r\n    ),\r\n    p(\r\n      \"[3] Pairwise comparison with treatment as a categorical variable:\r\n      p-values without adjustment for multiple comparisons.\"\r\n    )\r\n  )\r\n}\r\n\r\n#' @export\r\nserver <- function(input, output, session, datasets) {\r\n  output$table <- renderUI({\r\n    if (is.null(datasets)) {\r\n      return(NULL)\r\n    }\r\n\r\n    filtered_adsl <- datasets$get_data(\"ADSL\", filtered = FALSE)\r\n    filtered_adas <- datasets$get_data(\"ADAS\", filtered = FALSE)\r\n    adas <- filtered_adas\r\n\r\n    t <- tplyr_table(adas, TRTP) |>\r\n      set_pop_data(filtered_adsl) |>\r\n      set_pop_treat_var(TRT01P) |>\r\n      set_pop_where(EFFFL == \"Y\" & ITTFL == \"Y\") |>\r\n      set_distinct_by(USUBJID) |>\r\n      set_desc_layer_formats(\r\n        \"n\" = f_str(\"xx\", n),\r\n        \"Mean (SD)\" = f_str(\"xx.x (xx.xx)\", mean, sd),\r\n        \"Median (Min; Max)\" = f_str(\"xx.x (xxx;xx)\", median, min, max)\r\n      ) |>\r\n      add_layer(\r\n        group_desc(AVAL, where = AVISITN == 0, by = \"Baseline\")\r\n      ) |>\r\n      add_layer(\r\n        group_desc(AVAL, where = AVISITN == 24, by = \"Week 24\")\r\n      ) |>\r\n      add_layer(\r\n        group_desc(CHG, where = AVISITN == 24, by = \"Change from Baseline\")\r\n      )\r\n\r\n    sum_data <- t |>\r\n      build() |>\r\n      nest_rowlabels() |>\r\n      select(-starts_with(\"ord\")) |>\r\n      add_column_headers(\r\n        paste0(\r\n          \"|Placebo<\/br>(N=**Placebo**)| Xanomeline High Dose<\/br>(N=**Xanomeline High Dose**) \",\r\n          \"| Xanomeline Low Dose<\/br>(N=**Xanomeline Low Dose**)\"\r\n        ),\r\n        header_n(t)\r\n      )\r\n    model_portion <- efficacy_models(adas, \"CHG\", 24, !filter_active(datasets))\r\n\r\n    final <- bind_rows(sum_data, model_portion)\r\n\r\n    ht <- as_hux(final, add_colnames = FALSE) |>\r\n      set_bold(1, seq_len(ncol(final)), TRUE) |>\r\n      set_align(1, seq_len(ncol(final)), \"center\") |>\r\n      set_valign(1, seq_len(ncol(final)), \"bottom\") |>\r\n      set_bottom_border(1, seq_len(ncol(final)), 1) |>\r\n      set_width(1) |>\r\n      set_escape_contents(FALSE) |>\r\n      set_col_width(c(.5, 1 / 6, 1 / 6, 1 / 6))\r\n    HTML(to_html(ht))\r\n  })\r\n}\r\n","type":"text"},{"name":"views/user_guide.R","content":"box::use(\r\n  reactable[reactable, reactableOutput, renderReactable],\r\n  shiny[\r\n    NS, br, column, fluidRow, h1, h2, imageOutput,\r\n    p, renderImage, tabPanel, tabsetPanel, tagList, tags\r\n  ],\r\n  tibble[tibble],\r\n)\r\n\r\nui <- function(id, datasets) {\r\n  ns <- NS(id)\r\n  tagList(\r\n    fluidRow(\r\n      column(\r\n        width = 12,\r\n        tags$h1(\"Application Guide\"),\r\n        tags$p(\r\n          \"The Pilot 2 Shiny Application contains five distinct interfaces,\r\n          each displaying a different analysis output as described in the App Information page.\"\r\n        ),\r\n        reactableOutput(ns(\"pilot1_table\"))\r\n      )\r\n    ),\r\n    tags$br(),\r\n    fluidRow(\r\n      column(\r\n        width = 12,\r\n        tags$h2(\"Dynamic Filters\"),\r\n        tags$p(\r\n          \"The\", tags$b(\"KM Plot for TTDE\"),\r\n          \"module allows for filters to be applied based on variables in the\",\r\n          tags$b(\"ADSL\"), \"and\", tags$b(\"ADTTE\"), \"data sets.\r\n          Below is an example of performing subpopulation analysis\r\n          for an age group within the module:\"\r\n        ),\r\n        tags$br(),\r\n        tabsetPanel(\r\n          id = \"userSteps\",\r\n          type = \"tabs\",\r\n          tabPanel(\r\n            title = \"Step 1\",\r\n            fluidRow(\r\n              column(\r\n                width = 4,\r\n                tags$img(src = \"/static/app_screenshot1.png\", height = \"auto\")\r\n              ),\r\n              column(\r\n                class = \"top-margin\",\r\n                width = 8,\r\n                tags$p(\r\n                  \"Within the\", tags$b(\"Add Filter Variables\"),\r\n                  \"widget, click the box with the placeholder\",\r\n                  tags$b(\"Select variables to filter\")\r\n                )\r\n              )\r\n            )\r\n          ),\r\n          tabPanel(\r\n            title = \"Step 2\",\r\n            column(\r\n              width = 4,\r\n                tags$img(src = \"/static/app_screenshot2.png\", height = \"auto\")\r\n            ),\r\n            column(\r\n              class = \"top-margin\",\r\n              width = 8,\r\n              tags$p(\r\n                \"Scroll up/down or use the search bar to find the variable for subpopulation.\r\n                Click the desired variable, \",\r\n                tags$b(\"AGEYR1\"), \"in this example\"\r\n              )\r\n            )\r\n          ),\r\n          tabPanel(\r\n            title = \"Step 3\",\r\n            column(\r\n              width = 4,\r\n                tags$img(src = \"/static/app_screenshot3.png\", height = \"auto\")\r\n            ),\r\n            column(\r\n              width = 8,\r\n              class = \"top-margin\",\r\n              tags$p(\r\n                \"In the\", tags$b(\"Active Filter Variables\"),\r\n                \"widget, the selected variable with its available categories or levels\r\n                will display,\",\r\n                tags$b(\"AGEYR1\"), \"in this example, is displayed with three categories.\r\n                If the selected variable in the previous step is a continuous variable,\r\n                then a slider will appear for selecting a range of values.\"\r\n              ),\r\n              tags$br(),\r\n              tags$p(\r\n                \"Select the target subpopulation (e.g. >80) and\r\n                the analysis output displayed on the left hand side will be updated\r\n                in real-time according to the selection,\r\n                which in this example is equivalent to performing a filter on the\",\r\n                tags$b(\"ADSL\"), \"data by AGEGR1 == '>80'\"\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\nserver <- function(input, output, session, datasets) {\r\n  output$pilot1_table <- renderReactable({\r\n    pilot1_table <- tibble(\r\n      tab = c(\r\n        \"Demographic Table\", \"KM Plot for TTDE\",\r\n        \"Primary Table\", \"Efficacy Table\",\r\n        \"Visit Completion Table\"\r\n      ),\r\n      output = c(\r\n        \"Table 14-2.01 Summary of Demographic and Baseline Characteristics\",\r\n        \"Figure 14-1 Time to Dermatologic Event by Treatment Group\",\r\n        \"Table 14-3.01 Primary Endpoint Analysis: ADAS Cog(11) - Change from Baseline to Week 24 - LOCF\", # nolint\r\n        \"Table 14-3.02 Primary Endpoint Analysis: Glucose (mmol/L) - Summary at Week 20 - LOCF\",\r\n        \"Not Applicable\"\r\n      )\r\n    )\r\n\r\n    reactable(pilot1_table)\r\n  })\r\n}\r\n","type":"text"}]
